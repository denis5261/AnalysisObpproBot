import os
import logging
import datetime
import time

import PyPDF2
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, types, filters, F
from aiogram.types import FSInputFile
import asyncio
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from settings import TOKEN, ADMIN_IDS, LOG_FILE, REQUEST_LIMIT_pdf, REQUEST_LIMIT_mes
from utils import load_logs, save_logs, load_prompt, save_prompt, refact_res_mes, gigachat, extract_text_from_pdf

bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


class Form(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_send_message = State()


def admin_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—è `keyboard`
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            [
                KeyboardButton(text="üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"),
                KeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
            ],
            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            [
                KeyboardButton(text="ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç"),
            ],
        ],
        resize_keyboard=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )
    return keyboard

@dp.message(filters.command.Command('start'))
async def send_welcome(message: types.Message):
    user_id = str(message.from_user.id)
    logs = load_logs()
    if user_id in ADMIN_IDS:
        await message.answer("‚ú®ADMIN –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞!‚ú®", reply_markup=admin_keyboard())

    if user_id not in logs:
        logs[user_id] = {"Username": message.from_user.username, "requests_today_mes": 0, "requests_today_pdf": 0, "last_request_date": ""}

    if 'Username' not in logs[user_id]:
        logs[user_id]['Username'] = message.from_user.username
    save_logs(logs)

    text = ("‚ú® –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –¥—Ä—É–∑—å—è! ‚ú®\n\n"
            "ü§ñ –ú–µ–Ω—è –∑–æ–≤—É—Ç –†–∞—Å—à–∏—Ñ—Ä–æ–≤—â–∏–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤\n"
            "–Ø –º–æ–≥—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã, –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã!\n\n"
            "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            "‚ö† –í–∞–∂–Ω–æ! ‚ö†\n"
            "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —è –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞, –∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å–ª—É–≥—É.\n"
            "üîê –ü–æ–ª—å–∑—É—è—Å—å –±–æ—Ç–æ–º, –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
            "[–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏](https://docs.google.com/document/d/1hOsAz2g--YBnQvQohbxa0Ybzb6oWH3aIAp796w7rgK4)\n"
            "‚ùå –î–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç: –ø–æ 3 PDF –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å."
            )
    await message.answer(text)


@dp.message(F.text == "üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
async def send_logs(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(message.from_user.id) in ADMIN_IDS:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if os.path.exists(LOG_FILE):
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            await message.answer_document(document=FSInputFile(LOG_FILE))
        else:
            await message.answer("‚ùå –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")


@dp.message(F.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def request_broadcast_message(message: types.Message, state: FSMContext):
    if str(message.from_user.id) in ADMIN_IDS:
        markup = InlineKeyboardBuilder()
        markup.button(text="‚úÖ –î–∞", callback_data="confirm_prompt")
        markup.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_prompt")
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        await state.set_state(Form.waiting_for_send_message)
        #dp.register_message_handler(send_broadcast, state=None)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")



@dp.message(F.text == "ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç")
async def change_prompt(message: types.Message):
    markup = InlineKeyboardBuilder()
    markup.button(text="‚úÖ –î–∞", callback_data="confirm_prompt")
    markup.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_prompt")

    await message.answer(text=f"‚úÖ–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n{load_prompt()}\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ?", reply_markup=markup.as_markup())


@dp.message(Form.waiting_for_prompt)
async def process_new_prompt(message: types.Message, state: FSMContext):

    await message.answer(f"‚úÖ {save_prompt(message)}")

    await state.clear()


@dp.message(Form.waiting_for_send_message)
async def process_send_all_users_message(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    markup = InlineKeyboardBuilder()
    markup.button(text="‚úÖ –î–∞", callback_data="confirm_message_all_users")
    markup.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel_message_all_users")
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=markup.as_markup())


@dp.callback_query(F.data == "confirm_message_all_users")
async def confirm_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    await send_broadcast(callback_query.message, state)
    await callback_query.message.edit_reply_markup(reply_markup=None)
    #await state.clear()


@dp.callback_query(F.data == "cancel_message_all_users")
async def confirm_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await state.clear()


@dp.callback_query(F.data == "confirm_prompt")
async def confirm_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ "‚úÖ –î–∞"
    await callback_query.answer()
    await callback_query.message.answer("üì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    await callback_query.message.edit_reply_markup(reply_markup=None)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    await state.set_state(Form.waiting_for_prompt)


@dp.callback_query(F.data == "cancel_prompt")
async def cancel_prompt(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    await callback_query.message.edit_reply_markup(reply_markup=None)


async def send_broadcast(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_text = data.get("message_text")
    logs_dict = load_logs()
    sent_count = 0

    for user_id in logs_dict:
        try:
            await bot.send_message(user_id, f"{message_text}")
            sent_count += 1
        except Exception as e:
            logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


# @dp.message(F.document)
# async def handle_pdf(message: types.Message):
#     user_id = str(message.from_user.id)
#     logs = load_logs()
#     today = datetime.datetime.now().strftime("%Y-%m-%d")
#
#     if user_id not in logs:
#         logs[user_id] = {"Username": message.from_user.username, "requests_today_mes": 0, "requests_today_pdf": 0, "last_request_date": ""}
#
#     if logs[user_id]["last_request_date"] != today:
#         logs[user_id]["requests_today_pdf"] = 0
#         logs[user_id]["last_request_date"] = today
#
#     if logs[user_id]["requests_today_pdf"] >= REQUEST_LIMIT_pdf:
#         await message.answer("‚ùå –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.")
#         return
#
#     if 'Username' not in logs[user_id]:
#         logs[user_id]['Username'] = message.from_user.username
#
#     if user_id not in ADMIN_IDS:
#         logs[user_id]["requests_today_pdf"] += 1
#     save_logs(logs)
#
#     file_id = message.document.file_id
#     file = await bot.get_file(file_id)
#     file_path = file.file_path
#     downloaded_file = await bot.download_file(file_path)
#     temp_pdf_path = f"temp_{user_id}.pdf"
#
#     with open(temp_pdf_path, "wb") as f:
#         f.write(downloaded_file.read())
#
#     try:
#         with open(temp_pdf_path, "rb") as f:
#             reader = PyPDF2.PdfReader(f)
#             text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
#
#         await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
#         result_text = f"{gigachat(text, load_prompt())}"
#         await message.answer(refact_res_mes(result_text))
#     except Exception as e:
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
#         logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
#     finally:
#         os.remove(temp_pdf_path)
@dp.message(F.document)
async def handle_pdf(message: types.Message):
    user_id = str(message.from_user.id)
    today = datetime.datetime.now().strftime("%Y-%m-%d")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ (—Ä–µ–∞–ª–∏–∑—É–π `load_logs()`)
    logs = load_logs()
    if user_id not in logs:
        logs[user_id] = {"Username": message.from_user.username, "requests_today_pdf": 0, "last_request_date": ""}

    if logs[user_id]["last_request_date"] != today:
        logs[user_id]["requests_today_pdf"] = 0
        logs[user_id]["last_request_date"] = today

    if logs[user_id]["requests_today_pdf"] >= REQUEST_LIMIT_pdf:
        await message.answer("‚ùå –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    logs[user_id]["requests_today_pdf"] += 1
    save_logs(logs)  # –†–µ–∞–ª–∏–∑—É–π `save_logs()`

    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    downloaded_file = await bot.download_file(file.file_path)

    temp_pdf_path = f"temp_{user_id}.pdf"
    with open(temp_pdf_path, "wb") as f:
        f.write(downloaded_file.read())
    try:
        await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")

        extracted_text = extract_text_from_pdf(temp_pdf_path)
        result_text = f"{gigachat(extracted_text, load_prompt())}"
        await message.answer(refact_res_mes(result_text))
        os.remove(temp_pdf_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
    finally:
        os.remove(temp_pdf_path)

@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = str(message.from_user.id)
    logs = load_logs()
    today = datetime.datetime.now().strftime("%Y-%m-%d")

    if user_id not in logs:
        logs[user_id] = {"Username": message.from_user.username, "requests_today_mes": 0, "requests_today_pdf": 0, "last_request_date": ""}

    if logs[user_id]["last_request_date"] != today:
        logs[user_id]["requests_today_mes"] = 0
        logs[user_id]["last_request_date"] = today

    if logs[user_id]["requests_today_mes"] >= REQUEST_LIMIT_mes:
        await message.answer("‚ùå –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    if 'Username' not in logs[user_id]:
        logs[user_id]['Username'] = message.from_user.username

    if user_id not in ADMIN_IDS:
        logs[user_id]["requests_today_mes"] += 1
    save_logs(logs)

    await message.answer("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
    result_text = f"{gigachat(text=message.text, prompt=load_prompt())}"
    await message.answer(refact_res_mes(result_text))


async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

asyncio.run(main())
