import aiofiles
from gigachat import GigaChat
import os
import logging
import datetime
import json
import smtplib
import PyPDF2
import telebot
from dotenv import load_dotenv


load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(TOKEN)
LOG_FILE = "requests_log.json"
REQUEST_LIMIT = 20

ADMIN_IDS = ['696933310']

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤
def load_logs():
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def send_broadcast(message):
    # –ß–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ –ª–æ–≥–æ–≤
    logs_dict = load_logs()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    broadcast_message = message.text.strip()

    sent_count = 0

    for user_id in logs_dict:
        try:
            bot.send_message(user_id, f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{broadcast_message}", parse_mode="Markdown")
            sent_count += 1
        except Exception as e:
            logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

    bot.send_message(message.chat.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
def save_logs(logs):
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(logs, f, indent=4, ensure_ascii=False)

def admin_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π", "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    return keyboard


def gigachat(text):
    current_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É —Å–∫—Ä–∏–ø—Ç–∞
    ca_bundle_file = os.path.join(current_dir, "russian_trusted_root_ca.cer")
    prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–∞–º. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ "
        "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏.\n\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ"
    )


    full_text = prompt + text

    with GigaChat(
            credentials=os.getenv('API_KEY'),
            ca_bundle_file=ca_bundle_file) as giga:
        response = giga.chat(full_text)
        return response.choices[0].message.content


@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_id = str(message.from_user.id)
    logs = load_logs()

    if user_id not in logs:
        logs[user_id] = {"requests_today": 0, "last_request_date": ""}

    save_logs(logs)

    text = (
        "‚ú® –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –¥—Ä—É–∑—å—è! ‚ú®\n\n"
        "ü§ñ –ú–µ–Ω—è –∑–æ–≤—É—Ç *AnalysisObpproBot*.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.\n\n"
        "üìÑ *–ö–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?*\n"
        "üîπ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ PDF-—Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç.\n"
        "üîπ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–ø—Ä–∞–≤–∫—É.\n\n"
        "‚ö† *–í–∞–∂–Ω–æ!* ‚ö†\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è.\n"
        "üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ *–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è* –∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ.\n\n"
        "üîê *–ü–æ–ª—å–∑—É—è—Å—å –±–æ—Ç–æ–º, –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:*\n"
        "(https://docs.google.com/document/d/1hOsAz2g--YBnQvQohbxa0Ybzb6oWH3aIAp796w7rgK4/edit?usp=sharing)"
    )
    if user_id in ADMIN_IDS:
        bot.send_message(message.chat.id, "üîπ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!*", reply_markup=admin_keyboard(),
                         parse_mode="Markdown")
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == "üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
def send_logs(message):
    if str(message.from_user.id) in ADMIN_IDS:
        file_path = LOG_FILE

        if os.path.exists(file_path):
            with open(file_path, "rb") as file:
                bot.send_document(message.chat.id, file)
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")

@bot.message_handler(func=lambda message: message.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
def request_broadcast_message(message):
    if str(message.from_user.id) in ADMIN_IDS:
        bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        bot.register_next_step_handler(message, send_broadcast)
    else:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ PDF
@bot.message_handler(content_types=["document"])
def handle_pdf(message):
    user_id = str(message.from_user.id)
    logs = load_logs()

    today = datetime.datetime.now().strftime("%Y-%m-%d")
    if logs[user_id]["last_request_date"] != today:
        logs[user_id]["requests_today"] = 0
        logs[user_id]["last_request_date"] = today

    if logs[user_id]["requests_today"] >= REQUEST_LIMIT:
        bot.send_message(message.chat.id,
                         "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (20 –≤ –¥–µ–Ω—å). –ü–∏—à–∏—Ç–µ –Ω–∞ potyy@ya.ru –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è.")
        return

    logs[user_id]["requests_today"] += 1
    save_logs(logs)

    document = message.document
    file_info = bot.get_file(document.file_id)
    file_path = file_info.file_path
    downloaded_file = bot.download_file(file_path)

    temp_pdf_path = f"temp_{user_id}.pdf"
    with open(temp_pdf_path, "wb") as f:
        f.write(downloaded_file)

    try:
        with open(temp_pdf_path, "rb") as f:
            reader = PyPDF2.PdfReader(f)
            text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])

        bot.send_message(message.chat.id, "üìÑ –ê–Ω–∞–ª–∏–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
        result_text = f"üîé –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤:\n\n{gigachat(text)}...\n\n–ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –î–û–í–ï–†–ò–ï!"
        bot.send_message(message.chat.id, result_text)

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")

    finally:
        os.remove(temp_pdf_path)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(content_types=["text"])
def handle_text(message):
    user_id = str(message.from_user.id)
    logs = load_logs()

    today = datetime.datetime.now().strftime("%Y-%m-%d")
    if logs[user_id]["last_request_date"] != today:
        logs[user_id]["requests_today"] = 0
        logs[user_id]["last_request_date"] = today

    if logs[user_id]["requests_today"] >= REQUEST_LIMIT:
        bot.send_message(message.chat.id,
                         "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (20 –≤ –¥–µ–Ω—å). –ü–∏—à–∏—Ç–µ –Ω–∞ potyy@ya.ru –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è.")
        return

    logs[user_id]["requests_today"] += 1
    save_logs(logs)

    bot.send_message(message.chat.id, "üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
    result_text = f"üîé –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤:\n\n{gigachat(text=message.text)}...\n\n–ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –î–û–í–ï–†–ò–ï!"
    bot.send_message(message.chat.id, result_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)







# import os
# import json
# import logging
# import datetime
# import asyncio
# from aiogram import Bot, Dispatcher, types
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
# from aiogram.filters import Command
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.storage.memory import MemoryStorage
# from aiogram.client.default import DefaultBotProperties
# from aiogram.filters import StateFilter
# from dotenv import load_dotenv
# import PyPDF2
# from gigachat import GigaChat
#
# load_dotenv()
# TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# API_KEY = os.getenv("API_KEY")
# LOG_FILE = "requests_log.json"
# REQUEST_LIMIT = 20
# ADMIN_IDS = {'696933310'}
#
# logging.basicConfig(level=logging.INFO)
#
# bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
# dp = Dispatcher(storage=MemoryStorage())
#
#
# # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤
# async def load_logs():
#     if os.path.exists(LOG_FILE):
#         async with aiofiles.open(LOG_FILE, "r", encoding="utf-8") as f:
#             return json.loads(await f.read())
#     return {}
#
#
# # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
# async def save_logs(logs):
#     async with aiofiles.open(LOG_FILE, "w", encoding="utf-8") as f:
#         await f.write(json.dumps(logs, indent=4, ensure_ascii=False))
#
#
# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
# # def admin_keyboard():
# #     keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyb)
# #     keyboard.row("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π", "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
# #     return keyboard
#
# def admin_keyboard():
#     keyboard = [
#         [KeyboardButton(text="üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")],
#         [KeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")],
#     ]
#     return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
#
#
# # –§—É–Ω–∫—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å GigaChat
# async def gigachat(text):
#     current_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É —Å–∫—Ä–∏–ø—Ç–∞
#     ca_bundle_file = os.path.join(current_dir, "russian_trusted_root_ca.cer")
#     prompt = ("–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–∞–º. "
#               "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ "
#               "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏.")
#     full_text = prompt + text
#     with GigaChat(credentials=API_KEY, ca_bundle_file=ca_bundle_file) as giga:
#         response = giga.chat(full_text)
#         return response.choices[0].message.content
#
# @dp.message(Command("start"))
# async def send_welcome(message: types.Message):
#     user_id = str(message.from_user.id)
#     logs = await load_logs()
#
#     if user_id not in logs:
#         logs[user_id] = {"requests_today": 0, "last_request_date": ""}
#     await save_logs(logs)
#
#     text = ("‚ú® –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –¥—Ä—É–∑—å—è! ‚ú®\n\n"
#             "ü§ñ –ú–µ–Ω—è –∑–æ–≤—É—Ç *AnalysisObpproBot*.\n"
#             "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.\n\n"
#             "üìÑ *–ö–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?*\n"
#             "üîπ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ PDF-—Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∞—Ç.\n"
#             "üîπ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–ø—Ä–∞–≤–∫—É.\n\n"
#             "‚ö† *–í–∞–∂–Ω–æ!* ‚ö†\n"
#             "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è.\n"
#             "üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ *–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è* –∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ.")
#
#     if user_id in ADMIN_IDS:
#         await message.answer("üîπ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!*", reply_markup=admin_keyboard())
#     await message.answer(text)
#
#
# @dp.message(lambda message: message.text == "üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
# async def send_logs(message: types.Message):
#     if str(message.from_user.id) in ADMIN_IDS:
#         if os.path.exists(LOG_FILE):
#             await message.answer_document(types.FSInputFile(LOG_FILE))
#         else:
#             await message.answer("‚ùå –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
#
#
# @dp.message(lambda message: message.text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
# async def request_broadcast_message(message: types.Message, state: FSMContext):
#     if str(message.from_user.id) in ADMIN_IDS:
#         await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
#         await state.set_state("broadcast")
#     else:
#         await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
#
#
# @dp.message(Command("broadcast"))
# async def send_broadcast(message: types.Message, state: FSMContext):
#     logs_dict = await load_logs()
#     broadcast_message = message.text.strip()
#     sent_count = 0
#
#     for user_id in logs_dict:
#         try:
#             await bot.send_message(user_id, f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{broadcast_message}")
#             sent_count += 1
#         except Exception as e:
#             logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
#     await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
#     await state.clear()
#
#
# @dp.message(lambda message: message.document)
# async def handle_pdf(message: types.Message):
#     user_id = str(message.from_user.id)
#     logs = await load_logs()
#     today = datetime.datetime.now().strftime("%Y-%m-%d")
#
#     if logs[user_id]["last_request_date"] != today:
#         logs[user_id]["requests_today"] = 0
#         logs[user_id]["last_request_date"] = today
#
#     if logs[user_id]["requests_today"] >= REQUEST_LIMIT:
#         await message.answer("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (20 –≤ –¥–µ–Ω—å). –ü–∏—à–∏—Ç–µ –Ω–∞ potyy@ya.ru –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è.")
#         return
#
#     logs[user_id]["requests_today"] += 1
#     await save_logs(logs)
#
#     document = message.document
#     file = await bot.download(document)
#
#     with open(f"temp_{user_id}.pdf", "wb") as f:
#         f.write(file.read())
#
#     try:
#         with open(f"temp_{user_id}.pdf", "rb") as f:
#             reader = PyPDF2.PdfReader(f)
#             text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
#
#         await message.answer("üìÑ –ê–Ω–∞–ª–∏–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
#         result_text = f"üîé –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤:\n\n{await gigachat(text)}...\n\n–ë–õ–ê–ì–û–î–ê–†–ò–ú –ó–ê –î–û–í–ï–†–ò–ï!"
#         await message.answer(result_text)
#
#     except Exception as e:
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
#         logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
#
#     finally:
#         os.remove(f"temp_{user_id}.pdf")
#
#
# async def main():
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main())



