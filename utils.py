import logging
import os
import json

import PyPDF2
import pytesseract
from gigachat import GigaChat
from pdf2image import convert_from_path
from settings import LOG_FILE

pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
def load_logs():
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}




# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
def save_logs(logs):
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(logs, f, indent=4, ensure_ascii=False)


def load_prompt():
    try:
        with open("prompt.txt", "r", encoding="utf-8") as file:
            return file.read().strip()
    except FileNotFoundError:
        return \
            ("–¢—ã –ª—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ –Ω–∏–º. "
            "–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ. –≠—Ç–∏ –∞–Ω–∞–ª–∏–∑—ã —Å–ø–∞—Å—É—Ç —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –∂–∏–∑–Ω–µ–π.\n"
            "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞–¥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ö–µ–º–µ:\n"
            "–û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: –û–ø–∏—à–∏, –Ω–∞ —á—Ç–æ —Ç—ã –æ–±—Ä–∞—Ç–∏–ª –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.\n"
            "–°–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –û–ø–∏—à–∏, –Ω–∞ —á—Ç–æ —Ç—ã –æ–±—Ä–∞—Ç–∏–ª –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ.\n"
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º: –£–∫–∞–∂–∏, –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∫ –∫–∞–∫–æ–º—É –≤—Ä–∞—á—É —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è.\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑—ã: –£–∫–∞–∂–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n"
            "–°–∏–º–ø—Ç–æ–º—ã –∏ –∏—Ö —Å–≤—è–∑—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: –ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –∞–Ω–∞–ª–∏–∑–∞–º–∏.\n"
            "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞: –û–ø–∏—à–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∏ –∫–∞–∫–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.\n"
            "–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ù–∞–ø–∏—à–∏ –≤—Å–µ –≤—ã–≤–æ–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.\n"
            "–ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ —Ç–µ–º–µ\n")


def gigachat(text, prompt):
    current_dir = os.path.dirname(os.path.abspath(__file__))  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É —Å–∫—Ä–∏–ø—Ç–∞
    ca_bundle_file = os.path.join(current_dir, "russian_trusted_root_ca.cer")
    full_text = prompt + text
    with GigaChat(
            credentials=os.getenv('API_KEY'),
            ca_bundle_file=ca_bundle_file) as giga:
        response = giga.chat(full_text)
        return response.choices[0].message.content


def save_prompt(message):
    try:
        prompt = message.text
        with open("prompt.txt", "w", encoding="utf-8") as file:
            file.write(prompt)
        return "–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}"


def refact_res_mes(result_text):
    replasing_dict = {
        "–û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞": "ü©∫ –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:",
        "–°–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ": "‚ö†Ô∏è –°–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:",
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º": "üë©‚Äç‚öïÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º:",
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑—ã": "üî¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑—ã:",
        "–°–∏–º–ø—Ç–æ–º—ã –∏ –∏—Ö —Å–≤—è–∑—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏": "ü§í –°–∏–º–ø—Ç–æ–º—ã –∏ –∏—Ö —Å–≤—è–∑—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:",
        "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞": "üèÉ‚Äç‚ôÇÔ∏è –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:",
        "–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "‚úÖ –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    }
    result_text = result_text.replace('#', '').replace(':', '').replace('*', '')
    for key, value in replasing_dict.items():
        result_text = result_text.replace(key, value)
    return result_text


def extract_text_from_pdf(pdf_path):
    text = ""
    try:
        with open(pdf_path, "rb") as f:
            reader = PyPDF2.PdfReader(f)
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"

        if not text.strip():  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º OCR
            images = convert_from_path(pdf_path)
            for image in images:
                text += pytesseract.image_to_string(image, lang="rus") + "\n"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")

    return text.strip() if text.strip() else "–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω."